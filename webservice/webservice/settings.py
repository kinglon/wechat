"""
Django settings for webservice project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os.path
from pathlib import Path
import sys

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = ''
if 'SECRET_KEY' in os.environ:
    SECRET_KEY = os.environ.get('SECRET_KEY')

# Application definition

INSTALLED_APPS = [
    # 'django.contrib.admin',
    # 'django.contrib.auth',
    # 'django.contrib.sessions',
    'django.contrib.contenttypes',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'app'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    # 'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'app.middleware.HcMiddleware',
]

ROOT_URLCONF = 'webservice.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'webservice.wsgi.application'

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOG_PATH = BASE_DIR / 'log'
if 'LOG_PATH' in os.environ:
    LOG_PATH = os.environ.get('LOG_PATH')
if not os.path.exists(LOG_PATH):
    os.makedirs(LOG_PATH)

LOG_LEVEL = 'INFO'
if 'LOG_LEVEL' in os.environ:
    LOG_LEVEL = os.environ['LOG_LEVEL']
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'default': {
            'format': '[{asctime}][{levelname}][{name}] {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'concurrent_log_handler.ConcurrentRotatingFileHandler',
            'filename': os.path.join(LOG_PATH, 'main.log'),
            'encoding': 'utf-8',
            'maxBytes': 200*1024*1024,
            'backupCount': 10,
            'formatter': 'default',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'stream': sys.stdout,
            'formatter': 'default',
        }
    },
    'loggers': {
        '': {
            'handlers': ["console"],
            'level': LOG_LEVEL,
            'propagate': False,
        },
        'django': {
            'handlers': ["console"],
            'level': LOG_LEVEL,
            'propagate': False,
        },
    }
}

APPEND_SLASH = False

DEBUG = False
if 'ENABLE_DEBUG' in os.environ:
    DEBUG = True

# 环境
ALLOWED_HOSTS = ['127.0.0.1']
CSRF_TRUSTED_ORIGINS = ["chrome-extension://eggdlmopfankeonchoflhfoglaakobma",
                        'http://127.0.0.1:8000/']
DATABASES = {}

# 如果有设置环境变量，以环境变量为准
if 'DATABASE_USER' in os.environ:
    DATABASES['default']['NAME'] = os.environ.get('DATABASE_NAME')
    DATABASES['default']['USER'] = os.environ.get('DATABASE_USER')
    DATABASES['default']['PASSWORD'] = os.environ.get('DATABASE_PASSWORD')
    DATABASES['default']['HOST'] = os.environ.get('DATABASE_HOST')
    DATABASES['default']['PORT'] = os.environ.get('DATABASE_PORT')

if 'ALLOWED_HOST' in os.environ:
    ALLOWED_HOSTS.clear()
    ALLOWED_HOSTS.append(os.environ.get('ALLOWED_HOST'))
